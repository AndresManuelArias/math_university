import { assertEquals } from "https://deno.land/std/testing/asserts.ts";
import * as geometria_analitica from "../../src/geometria_analitica/index.ts"

/*
(async function(){
             geometria_analitica =  await import('../geometria_analitica/index.ts')
        })()
*/
interface datosProbar {
    puntos:geometria_analitica.Punto[]
    resultado:number|number[]|any;
}
let probar:datosProbar[]= [
    {puntos:[{x:6,y:0},{x:3,y:-4}],
        resultado:5
    },
    {puntos:[{x:-6,y:-4},{x:1,y:7}],
        resultado:13.038404810405298
    },
    {puntos:[{x:2,y:3},{x:5,y:-1}],
        resultado:5
    },
    {puntos:[{x:1,y:1},{x:-3,y:0}],
        resultado:4.123105625617661
    },
    {puntos:[{x:-1,y:2},{x:-2,y:0}],
        resultado:2.23606797749979
    },
    {puntos:[{x:4,y:2},{x:8,y:5}],
        resultado:5
    },
    {puntos:[{x:-6,y:8},{x:-3,y:9}],
        resultado:Math.sqrt(10)
    },
    {puntos:[{x:-6,y:8},{x:-3,y:9}],
        resultado:Math.sqrt(10)
    },
    {puntos:[{x:-2,y:-7},{x:7,y:-9}],
        resultado:Math.sqrt(85)
    },
    {puntos:[{x:8,y:-3},{x:4,y:-7}],
        resultado:Math.sqrt(32)
    },
    {puntos:[{x:-5,y:-4},{x:-6,y:4}],
        resultado:Math.sqrt(65)
    },
    {puntos:[{x:-6,y:4},{x:-8,y:6}],
        resultado:Math.sqrt(8)
    },
        {puntos:[{x:1,y:5},{x:6,y:5}],
        resultado:5
    },
    {puntos:[{x:6,y:-1},{x:1,y:-3}],
    resultado:Math.sqrt(29)},
    {puntos:[{x:-6,y:2},{x:1,y:5}],
    resultado:Math.sqrt(58)},
    {puntos:[{x:-11,y:6},{x:1,y:-4}],
    resultado:Math.sqrt(244)},
    {puntos:[{x:-5,y:1},{x:0,y:7}],
    resultado:Math.sqrt(61)},
    {puntos:[{x:-2,y:3},{x:-4,y:1}],
    resultado:Math.sqrt(8)},
    {puntos:[{x:-4,y:1},{x:3,y:-4},],
    resultado:Math.sqrt(74)},
    {puntos:[{x:3,y:-4},{x:-2,y:3}],
    resultado:Math.sqrt(74)},
    {puntos:[{x:-6,y:4},{x:6,y:7}],
    resultado:Math.sqrt(153)},
    {puntos:[{x:2,y:6},{x:4,y:-2}],
    resultado:Math.sqrt(68)},
    {puntos:[{x:-4,y:-1},{x:8,y:5}],
    resultado:Math.sqrt(180)},
    {puntos:[{x:-2,y:5},{x:4,y:8}],
    resultado:Math.sqrt(45)},
    {puntos:[{x:4,y:8},{x:6,y:4}],
    resultado:Math.sqrt(20)},
    //B
    {puntos:[{x:-7,y:4},{x:5,y:1}],
    resultado:Math.sqrt(153)},
    //b
    {puntos:[{x:-4,y:-1},{x:0,y:-2}],
    resultado:Math.sqrt(17)},
    //h
    {puntos:[{x:1,y:2},{x:0,y:-2}],
    resultado:Math.sqrt(17)},
    //--
    {puntos:[{x:-6,y:3},{x:3,y:-3}],
    resultado:Math.sqrt(117)},
    {puntos:[{x:-6,y:-2},{x:-1,y:1}],
    resultado:Math.sqrt(34)},  
    {puntos:[{x:-6,y:-2},{x:-10,y:-7}],
    resultado:Math.sqrt(41)},
    {puntos:[{x:2,y:4},{x:0,y:8}],
    resultado:Math.sqrt(20)},
    {puntos:[{x:2,y:4},{x:6,y:7}],
    resultado:Math.sqrt(25)}, 
    {puntos:[{x:1,y:-5},{x:4,y:-1}],
    resultado:5}, 
    {puntos:[{x:2,y:-3},{x:-5,y:4}],
    resultado:Math.sqrt(98)}, 
    {puntos:[{x:2,y:-3},{x:-7,y:-6}],
    resultado:Math.sqrt(90)}, 
    {puntos:[{ x: 6, y: -1 },{ x: 2, y: 1 }],
    resultado:Math.sqrt(20)}, 
    {puntos:[{ x: 7, y: 3 },{ x: 1, y: -5 }],
    resultado:10}, 
    {puntos:[{ x: 3, y: 5 },{ x: 4, y: 6 }],
    resultado:Math.sqrt(2)}, 
    {puntos:[{x:5,y:4},{x:8,y:7}],
    resultado:Math.sqrt(18)}, 
    {puntos:[{x:5,y:4},{x:2,y:-1}],
    resultado:Math.sqrt(34)}, 
    {puntos:[{x:5,y:4},{x:10,y:0}],
    resultado:Math.sqrt(41)}, 
    {puntos:[{x:-40,y:80},{x:-70,y:70}],
    resultado:Math.sqrt(1000)},
    {puntos:[{x:-40,y:80},{x:-20,y:20}],
    resultado:Math.sqrt(4000)},
    {puntos:[{x:10,y:40},{x:40,y:40}],
    resultado:30},
    {puntos:[{x:-10,y:60},{x:60,y:-10}],
    resultado:Math.sqrt(9800)},
    {puntos:[{x:60,y:10},{x:10,y:60}],
    resultado:Math.sqrt(5000)},
    {puntos:[{x:-2,y:-4},{x:-3,y:1}],
    resultado:Math.sqrt(26)},
    {puntos:[{x:-2,y:-4},{x:-6,y:-7}],
    resultado:5},
    {puntos:[{x:-2,y:-4},{x:3,y:-6}],
    resultado:Math.sqrt(29)},
    {puntos:[{x:-5,y:5},{x:-8,y:-3}],
    resultado:Math.sqrt(73)},
    {puntos:[{x:-8,y:-3},{x:4,y:-7}],
    resultado:Math.sqrt(160)},
    {puntos:[{x:-5,y:5},{x:4,y:-7}],
    resultado:Math.sqrt(225)},
    //
    {puntos:[{x:0,y:0},{x:6,y:8}],
    resultado:Math.sqrt(100)},
    {puntos:[{x:0,y:0},{x:-4,y:9}],
    resultado:Math.sqrt(97)},
    {puntos:[{x:0,y:0},{x:7,y:7}],
    resultado:Math.sqrt(98)}
]

probar.forEach((data:datosProbar,index)=>{
    Deno.test(`Distancia entre puntos ${index}`, () => {
        assertEquals(geometria_analitica.medirDistanciaDospuntos(data.puntos[0],data.puntos[1]),data.resultado)
    });
})
let distancia:datosProbar[]= [
    {puntos:[{x:2,y:-3},{x:-5,y:4},{x:8,y:5},{x:-7,y:-6}],
        resultado:{   
            distancia:Math.sqrt(90),
            punto:{x:-7,y:-6}
        }
    }, 
    {puntos:[{x:5,y:4},{x:8,y:7},{x:2,y:-1},{x:10,y:0}],
        resultado:{
            distancia:Math.sqrt(18),
            punto:{x:8,y:7}
        }
    },
    {puntos:[{x:-2,y:-4},{x:-3,y:1},{x:-6,y:-7},{x:3,y:-6}],
        resultado:{
            distancia:5,
            punto:{x:-6,y:-7}
        }
    }

]
distancia.forEach((data:datosProbar,index)=>{
    Deno.test(`Distancia menor ${index}`, () => {
        let puntos:geometria_analitica.Punto[]=data.puntos.splice(1)
        assertEquals(geometria_analitica.encontrarPuntoMasCercano(data.puntos[0],puntos),data.resultado)
    });
})

let probarPuntoMedio:datosProbar[]= [
    {puntos:[{x:5,y:3},{x:1,y:7}],
        resultado:[3,5]
    },
    {puntos:[{x:6,y:2},{x:10,y:0}],
        resultado:[8,1]
    },
    {puntos:[{x:1,y:-2},{x:-7,y:6}],
        resultado:[-3,2]
    },
    {puntos:[{x:-5,y:2},{x:2,y:-7}],
        resultado:[-3/2,-5/2]
    },
    {puntos:[{x:2,y:7},{x:8,y:2}],
        resultado:[5,4.5]
    },
    {puntos:[{x:-2,y:4},{x:7,y:3}],
        resultado:[2.5,3.5]
    },
    {puntos:[{x:-4,y:8},{x:6,y:7}],
        resultado:[1,7.5]
    },
    {puntos:[{x:3,y:4},{x:8,y:-4}],
        resultado:[5.5,0]
    },
    {puntos:[{x:-7,y:-9},{x:6,y:3}],
        resultado:[-0.5,-3]
    },
    {puntos:[{x:-5,y:-7},{x:-3,y:-5}],
        resultado:[-4,-6]
    }
]
probarPuntoMedio.forEach((data:datosProbar,index)=>{
    Deno.test(`punto medio entre puntos ${index}`, () => {
        assertEquals(geometria_analitica.puntoMedio(data.puntos[0],data.puntos[1]),data.resultado)
    });
})

let probarMedirDistancias:datosProbar[]= [
    {puntos:[{x:1,y:5},{x:6,y:5},{x:6,y:-1},{x:1,y:-3},{x:-6,y:-3},{x:-6,y:2},{x:1,y:5}],
        resultado:36.00093791299841
    },
    {puntos:[{x:-2,y:3},{x:-4,y:1},{x:3,y:-4},{x:-2,y:3}],
    resultado:20.033077658831445},
    {puntos:[{x:2,y:7},{x:6,y:7},{x:-4,y:-3},{x:2,y:7}],
    resultado:29.804039413421552},
    {puntos:[{x:0,y:7},{x:6,y:0},{x:3,y:-4},{x:-3,y:-4},{x:-6,y:0},{x:0,y:7}],
    resultado:34.439088914585774},
    {puntos:[{x:-2,y:6},{x:3,y:3},{x:-3,y:-7},{x:-8,y:-4},{x:-2,y:6}],
    resultado:34.98571136907181},
    {puntos:[{x:4,y:5},{x:8,y:-3},{x:-2,y:-8},{x:-6,y:0},{x:4,y:5}],
    resultado:40.24922359499622},
    {puntos:[{x:-5,y:-2},{x:1,y:5},{x:5,y:-2},{x:2,y:-6},{x:-5,y:-2}],
    resultado:30.344059953889985},
    {puntos:[{x:-3,y:2},{x:6,y:-2},{x:3,y:-6},{x:0,y:-6},{x:-3,y:2}],
    resultado:26.392861547113633},
    {puntos:[{x:-6,y:5},{x:-2,y:5},{x:6,y:0},{x:2,y:-4},{x:-6,y:1},{x:-6,y:5}],
    resultado:32.524816513605586},
    {puntos:[{x:-6,y:9},{x:5,y:9},{x:8,y:1},{x:2,y:-6},{x:-3,y:-6},{x:-9,y:1},{x:-6,y:9}],
    resultado:51.52709640522084},
    {puntos:[{x:-3,y:3},{x:7,y:-3}],
    resultado:Math.sqrt(136)},
    {puntos:[{x:-3,y:3},{x:-4,y:-5},{x:7,y:-3}],
    resultado:19.242597635797498},
    {puntos:[{x:1,y:1},{x:3,y:5},{x:4,y:2},{x:1,y:1}],
    resultado:2*Math.sqrt(5)+2*Math.sqrt(10)},
    {puntos:[{x:3,y:1},{x:2,y:4},{x:-1,y:2},{x:3,y:1}],
    resultado:Math.sqrt(10)+Math.sqrt(13)+Math.sqrt(17)},
    {puntos:[{x:5,y:3},{x:1,y:-2}],
    resultado:Math.sqrt(41)},
    {puntos:[{x:-4,y:3},{x:5,y:-2}],
    resultado:Math.sqrt(106)},
    {puntos:[{x:5,y:7},{x:-3,y:4}],
    resultado:Math.sqrt(73)},
    {puntos:[{x:7,y:3},{x:-5,y:4},{x:-4,y:-6}],
    resultado:Math.sqrt(145)+Math.sqrt(101)},
    {puntos:[{x:7,y:3},{x:-4,y:-6}],
    resultado:Math.sqrt(202)},
    //
    {puntos:[{x:-1,y:6},{x:-2,y:-3}],
    resultado:Math.sqrt(82)},
    {puntos:[{x:-1,y:6},{x:6,y:2}],
    resultado:Math.sqrt(65)},
    {puntos:[{x:6,y:2},{x:-2,y:-3}],
    resultado:Math.sqrt(89)},
    {puntos:[{x:-1,y:6},{x:6,y:2},{x:-2,y:-3}],
    resultado:Math.sqrt(65)+Math.sqrt(89)},
    //
    {puntos:[{x:6,y:3},{x:-3,y: 4}],
    resultado:Math.sqrt(82)},
]
probarMedirDistancias.forEach((data:datosProbar,index)=>{
    Deno.test(`distancia entre puntos ${index}`, () => {
        assertEquals(geometria_analitica.medirDistanciaVariosPuntos(data.puntos),data.resultado)
    });
})
